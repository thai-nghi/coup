"""empty message

Revision ID: b0965d8b16e3
Revises: 
Create Date: 2024-11-14 10:56:51.690642

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "b0965d8b16e3"
down_revision = None
branch_labels = None
depends_on = None

match_type_enum = postgresql.ENUM(
    "RANKED", "LOBBY", name="matchtype", create_type=False
)
match_result_enum = postgresql.ENUM(
    "LOSE", "WIN", name="matchresult", create_type=False
)
coin_change_enum = postgresql.ENUM(
    "MATCH", "SHOP", "PROMOTION", "ADMIN", name="coinchangeeventtype", create_type=False
)
item_type_enum = postgresql.ENUM(
    "AVATAR_FRAME",
    "CHESS_BOARD",
    "CHESS_BACK",
    "WIN_ANIMATION",
    "LOSE_ANIMATION",
    name="itemtype",
    create_type=False,
)


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    match_type_enum.create(op.get_bind())
    match_result_enum.create(op.get_bind())
    coin_change_enum.create(op.get_bind())
    item_type_enum.create(op.get_bind())
    op.create_table(
        "admin_user",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("display_name", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("password", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_admin_user_email"), "admin_user", ["email"], unique=True)
    op.create_table(
        "countries",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("label", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "matches",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("replay", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column(
            "match_time",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("current_timestamp"),
            nullable=False,
        ),
        sa.Column("type", match_type_enum, nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "shop_item",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("price", sa.Integer(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("banner_pic", sa.String(), nullable=False),
        sa.Column(
            "item_type",
            item_type_enum,
            nullable=False,
        ),
        sa.Column("discount", sa.Float(), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("display_name", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("password", sa.String(), nullable=True),
        sa.Column("elo", sa.Integer(), nullable=False),
        sa.Column("coins", sa.Integer(), nullable=False),
        sa.Column("country", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["country"],
            ["countries.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_user_country"), "user", ["country"], unique=False)
    op.create_index(op.f("ix_user_email"), "user", ["email"], unique=True)
    op.create_table(
        "coin_change",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("player_id", sa.Integer(), nullable=False),
        sa.Column("coin_change", sa.Integer(), nullable=False),
        sa.Column(
            "event_type",
            coin_change_enum,
            nullable=True,
        ),
        sa.Column("event_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["player_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "elo_change",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("player_id", sa.Integer(), nullable=False),
        sa.Column("elo_change", sa.Integer(), nullable=False),
        sa.Column("match_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["match_id"],
            ["matches.id"],
        ),
        sa.ForeignKeyConstraint(
            ["player_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_elo_change_player_id"), "elo_change", ["player_id"], unique=False
    )
    op.create_table(
        "player_matches",
        sa.Column("player_id", sa.Integer(), nullable=False),
        sa.Column("match_id", sa.Integer(), nullable=False),
        sa.Column("result", match_result_enum, nullable=False),
        sa.ForeignKeyConstraint(
            ["match_id"],
            ["matches.id"],
        ),
        sa.ForeignKeyConstraint(
            ["player_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("player_id", "match_id", name="player_match_pk"),
    )
    op.create_index(
        op.f("ix_player_matches_player_id"),
        "player_matches",
        ["player_id"],
        unique=False,
    )
    op.create_table(
        "user_google_id",
        sa.Column("google_id", sa.String(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("google_id"),
    )
    op.create_table(
        "user_inventory",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("item_id", sa.Integer(), nullable=False),
        sa.Column("quantity", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["item_id"],
            ["shop_item.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "item_id", name="inventory_pk"),
    )
    op.create_index(
        op.f("ix_user_inventory_item_id"), "user_inventory", ["item_id"], unique=False
    )
    op.create_index(
        op.f("ix_user_inventory_user_id"), "user_inventory", ["user_id"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_user_inventory_user_id"), table_name="user_inventory")
    op.drop_index(op.f("ix_user_inventory_item_id"), table_name="user_inventory")
    op.drop_table("user_inventory")
    op.drop_table("user_google_id")
    op.drop_index(op.f("ix_player_matches_player_id"), table_name="player_matches")
    op.drop_table("player_matches")
    op.drop_index(op.f("ix_elo_change_player_id"), table_name="elo_change")
    op.drop_table("elo_change")
    op.drop_table("coin_change")
    op.drop_index(op.f("ix_user_email"), table_name="user")
    op.drop_index(op.f("ix_user_country"), table_name="user")
    op.drop_table("user")
    op.drop_table("shop_item")
    op.drop_table("matches")
    op.drop_table("countries")
    op.drop_index(op.f("ix_admin_user_email"), table_name="admin_user")
    op.drop_table("admin_user")
    # ### end Alembic commands ###
